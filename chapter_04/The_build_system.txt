1. Comparison with other build systems:
• Unlike most make-based build systems, the Android build system doesn't rely on recursive makefiles. Unlike linux kernel, for example, there isn't a top-level makefile that will recursively invoke subdirectories' makefiles. Instead, there's a script that explores all directories and subdirectories until it finds an Android.mk file, then it stops and doesn't explore the subdirectories underneath that file's location - unless that Android.mk instructs the build system otherwise.
• Note that Android doesn't rely on makefiles called Makefile; instead, it's the Android.mk files that specify how the local module is built.
• If you want to understand why Android's build system doesn't use recursive make, see the paper "Recursive Make Considered Harmful" for more details.


2. Architectures:
The entry point of the build system is build/core/main.mk. The build/core directory contains the bulk of the build system; and remember that Android's build system pulls everything into a single huge makefile, it isn't recursive.
• Why does make hang: 
What it is doing is incorporating every Android.mk file it can find in the AOSP. If you want to see this in action, edit build/core/main.mk and replace this line:
	include $(subdir_makefiles)
with this:
	$(foreach subdir_makefile, %(subdir_makefiles), \
			$(info Including $(subdir_makefile)) \
			$(eval include $(subdir_makefile)) \
	)
	subdir_makefile := 
The next time you type make, you'll actually see what's happening.
• Product description: - AndroidProducts.mk; - Single Product .mk;
Board description: - BoardConfig.mk;
Core(main.mk) - Configuration (config.mk); - Definitions (definitions.mk); - Main rules (Makefile); - Clean rules (cleanbuild.mk).
• Configuration of the CPU-specific options used to build Android: 
For ARM, those are contained in build/core/combo/arch/arm/armv*.mk, with TARGET_ARCH_VARIANT determining the actual file to use.

• envsetup.sh:
This script defines several useful commands:
* $ croot; // Changes directory to the top of project tree, wherever you are right now.
* $ godir <filename>; // Jumps to the directory contains the specified file.
* $ cgrep ... ; // Greps on all local C/C++ files.
* $ jgrep ... ; // Greps on all local Java files.
* $ resgrep ... ; // Greps on all local res/*.xml files.
* $ m; // Make from the top tree of the project, regardless of wherever you are right now.
* $ mm; // Build all the modules in the current directory. Note that mm doesn't rebuild the entire tree and therefore won't regenerate AOSP images even if a dependent module has changed. (m will do that, though.) Still mm is useful to test whether your local changes break the build or not.
& $ mmm ... ; // Build all the modules in the supplied directory.

• vendor/*/vendorsetup.sh; vendor/*/*/vendorsetup.sh; device/*/*/vendorsetup.sh
• Function definitions:
Build system defines a large number of functions in the file build/core/definitions.mk, including file lookup (e.g., all-makefiles-under, all-c-files-under), transformation (e.g., transform-c-to-o, transfrom-java-to-classes.jar), copying (e.g., copy-file-to-target), and utility (e.g., my-dir).
These functions are not only used throughout the build system, but also they are directly used in modules' Android.mk files.
See the source code of this file for more details.


3. Main make recipes:
Look at build/core/Makefile. This makefile takes important place and generates a lot of imprtant images/components:
* Properties: including the target's /default.prop and /system/build.prop.
* RAM disk
* Boot image (ramdisk + kernel image)
* NOTICE files
* OTA keystore
* Recovery image
* System image (the target's /system directory)
* Data partition image (the target's /data directory)
* OTA update package
* SDk

• Note that some things are not in this makefile:
Kernel images: instead, find an Androidized kernel on your own, build it separately from the AOSP and feed it to the AOSP.
NDK: NDK's build system is entirely separate from the AOSP's build system. NDK's build system is in ndk/build/.
CTS: The rules for building the CTS are in build/core/tasks/ctk.mk.

• Module build templates:
See "Embedded Android" P128~129 for more details.
Note that CLEAR_VARS, which is provided by clear_vars.mk, is very important. Including CLEAR_VARS ensures that the LOCAL_* values set for modules preceding yours are zeroed out by the time your Android.mk is included. Also a single Android.mk can describe multiple modules one after the other. Hence CLEAR_VARS ensures that previous module recipes don't pollute subsequent ones.
THe build/core/build-system.html file contains an early version of the meaning of LOCAL_* variables. See it and P131~132 for more details about LOCAL_* variables. Also clear_vars.mk contains the full list of variables that are cleared.

• Output:
out/ is mainly separated into two directories: host/ and target/. The directory you'll be most interested in is out/target/product/<PRODUCT_DEVICE>/, where the output images will be located. Some interesting files in this directory are:
* installed-files.txt: A list of all the files installed in data/ and system/ directories.
* ramdisk.img: The RAM disk image generated based on the content of the root/ directory.
* root/: The contents of the target's root filesystem.
* system/: The target's /system directory.
When the kernel boots, it will mount RAM disk and execute the /init binary found inside. That binary will in turn run the /init.rc script that will mount both the /system and /data images.


4. Build receipes:
$ make; // This is equivalent to: $ make droid;
$ make showcommands; // "showcommands" like gcc lines everything it does.
$ make sdk; // Building your own sdk, after compilition sdk exists in /out/host/<PC_platform>/sdk/
$ make win_sdk; // Building SDK for windows.
$ make cts; // Building the CTS. Note that for building CTS, you don't need to use envsetup.sh or lunch!

• Building the NDK:
NDK also has its own build system:
$ cd mdk/build/tools;
$ export ANDROID_NDK_ROOT=aosp-root/ndk
$ ./make-release; // see ./make-release --help

• Building a single module:
$ make Launcher2 snod; // Add the snod target to force the build system to regenerate the system image to include your updated module.

$ make update-api; // Updating the API
* Building out of tree and building recursively in tree, see "Embedded Android" P140~143 for more details.


5. Basic AOSP hacks:
Assuming you work for a company called ACME and the product you're working on is CoyotePad:
	$ source build/envsetup.sh
	$ mkdir -p device/acme/coyotepad
	$ cd device/acme/coyotepad
• The 1st thing you need to do is to create AndroidProducts.mk:
	PRODUCT_MAKEFILES += \
		$(LOCAL_DIR)/full_coyotepad.mk
In full_coyotepad.mk, it may use inherit-product function to tell build system to pull in other product descriptions as the basis of ours. See the full_soho.mk in the current directory as an example.
With regard to other variables:
DEVICE_PACKAGE_OVERLAYS
PRODUCT_PACKAGES: Specify packages we'd like to have this product include in addition to those specified in the products we're already inheriting from. If you have custom apps, binaries, or libraries located within device/acme/coyotepad/, you'll declare them here. Note that you should use "+=", not "?=" or ":=".
PRODUCT_DEVICE: The name of the actual finished product shipped to the user. TARGET_DEVICE derives from this variable. PRODUCT_DEVICE must match an entry in device/acme/.
PRODUCT_NAME: As is appeared in the lunch combo.
PRODUCT_COPY_FILES: Specify files we'd like to see copied to the target's filesystem and where they need to be copied. Each src/dest pair is colon-separated, and pairs are space-separated among themselves. This is useful for configuration files and prebuilt binaries such as firmware or kernel modules.
PRODUCT_MODEL: ro.product.model field.

• The 2nd thing is to provide BoardConfig.mk which is used to provide information about the board, see BoardConfig.mk in the current directory for more details.

• You also need to provide a Android.mk inorder to build all the modules that you might have included in this device's directory, for example:
	LOCAL_PATH := $(call my-dir)
    	include $(CLEAR_VARS)
    	ifneq ($(filter coyotepad, $(TARGET_DEVICE)),)
    	include $(call all-makefiles-under, $(LOCAL_PATH))
	endif
If you have several products sharing the same set of packages, you may want to create a device/acme/common/ directory containing the shared packages.
• Lastly, you should make the device just added in visible to envsetup.sh and lunch. To do so, you need to add a vendorsetup.sh in device/acme/coyotepad/:
	add_lunch_combo full_coyotepad-eng
	$ chmod 755 vendorsetup.sh
• Also note the file build.prop in system/. It contains various global properties that will be available at runtime on the target.

• Adding an app:
Copy the whole app file into: device/acme/coyotepad/, for example: $ cp -r ~/HelloWorld device/acme/coyotepad/;
Then you need to create an Android.mk in aosp-root/device/acme/coyotepad/HelloWorld/ to build the app:
	LOCAL_PATH := $(call my-dir)
    	include $(CLEAR_VARS)
    	
    	LOCAL_MODULE_TAGS := optional
	LOCAL_SRC_FILEs := $(call all-java-files-under, src)
    	LOCAL_PACKAGE_NAME := HelloWorld

	include $(BUILD_PACKAGE)
* Note that this module is tagged as optional, it won't be included by default in the AOSP build. To include it, you'll need to add it to the PRODUCT_PACKAGES listed in the full_coyotepad.mk.
* If, instead of adding the app to your board only, you could add a default app globally to all products generated by the AOSP with the existing stock apps, you'll need to put it in packages/apps/ instead of the board's directory. You'll also need to modify one of the built-in .mk files such as aosp-root/build/target/product/core.mk, to have your app built by default. (Although this is not recommended, it's best to keep your custom modifications in device/acme/coyotepad/.)

• Adding an app overlay:
Sometimes you don't actually want to add an app but would rather modify existing ones included by default in the AOSP. That's what app overlays are for. Overlays are a mechanism allowing device manufacturers to change the resources provided, without actually modifying the original resources in AOSP. To use this capability, you must create an overlay tree and tell the build system about it.
The easiest location for an overlay is within a device-specific directory:
	$ cd device/acme/coyotepad/
	$ mkdir overlay
To tell the build system about this overlay, you need to modify full_coyotepad.mk:
	DEVICE_PACKAGE_OVERLAYS := device/acme/coyotepad/overlay
See "Embedded Android" P150 for the detailed example. You can replace most resources like images and XML files.

• Adding a native tool or daemon:
Like adding an app, you also need an Android.mk in the native tool's directory:
	LOCAL_PATH := $(call my-dir)
    	include $(CLEAR_VARS)
    	LOCAL_MODULE := hello-world
	LOCAL_MODULE_TAGS := optional
	LOCAL_SRC_FILES := hello-world.cpp
	LOCAL_SHARED_LIBRARIES := liblog
	include $(BUILD_EXECUTABLE)
You also need to make sure hello-world is part of coyotepad's PRODUCT_PACKAGES. 
Global addition of native tools and daemons is also possible, see adding an overlay above.

• Adding a native library:
Like apps and binaries, you can also add native libraries for your board. The Android.mk you need is as follows:
	LOCAL_PATH := $(call my-dir)
    	include $(CLEAR_VARS)
    	LOCAL_MODULE := libmylib
	LOCAL_MODULE_TAGS := optional
	LOCAL_PRELINK_MODULE := false
	LOCAL_SRC_FILES := $(call all-c-files-under, .)
    	include $(BUILD_SHARED_LIBRARY)
To use this library, you must add it to the libraries listed by the Android.mk file of whichever binaries depend on it:
	LOCAL_SHARED_LIBRIES := libmylib
You'll also likely need to add relevant headers to an include/ directory located in about the same location as you put the library, such as device/acme/coyotepad/include/.
