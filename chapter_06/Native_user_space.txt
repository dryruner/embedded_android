1. Filesystem:
RAM disk filesystem (root file system /) is mounted as read-only. /cache, /data, and /system are typically mounted from separate partitions on actual storage media. Usually /cache and /data are mounted as read-write, while /system is mounted as read-only.
• Using a single filesystem:
There's nothing preventing you from using a single filesystem for all of Android's build output instead of using separate storage partitions. By using a single filesystem, you're assuming that you can update the entirety of the filesystem in one fell swoop. In sum, it'll be very difficult to create a fail-safe update procedure for your system.
* The SD card always appears as a block device and typically has a VFAT filesystem on it.
* The root directory:
See "Embedded Android" P179~180 for more details of every entry under /.

* /system:
/system/app: All modules built with BUILD_PACKAGE are here.
/system/bin: All modules built with BUILD_EXECUTABLE are here.
/system/framework: *.jar files. All modules built with BUILD_JAVA_LIBRARY are here.
/system/lib: The system's native libraries. All modules built with BUILD_SHARED_LIBRARY are here.
/system/build.prop: A set of properties generated during the build process of AOSP. They are loaded by init at startup.
(BUILD_PREBUILT: No default output location. Make sure you explicitly specify either LOCAL_MODULE_CLASS or LOCAL_MODULE_PATH.
 BUILD_KEY_CHAR_MAP: Output location is in /system/usr/keychars.
 )

* /data:
/data/app: Default install location for apps.
/data/app-private: Install location for apps with forward locking. (Developer can set the Copy Protection in the Publishing Options to On or Off. By setting it Off, the app's .apk can be copied off the device, while it can't if set to On. So On means the app is installed in /data/app-private/, and Off means it's installed in /data/app/.)
/data/property: Persistent system properties.
/data/tombstones: Whenever a native binary crashes, a file whose name is tombstone_seqnum is created here with information about the crash.

* Explicitly copying files:
In the case of some files, you don't need the build system to build them in any manner; you just need to copy the files into the filesystem. That's the purpose of the PRODUCT_COPY_FILES macro that you can use in the product's .mk. See "Embedded Android" P187.

* Default rights and ownership:
See system/core/include/private/android_filesystem_config.h. Every app is installed as a separate user. See "Embedded Android" P187 ~ P190 for more details.


2. adb:
Source code is in system/core/adb/. ADB server: on the host side. ADB daemon: on the device side.
To provide services, adb server opens socket 5037 on the host and listens for connections. Anyone can connect to the server as long as he respects the protocol. See OVERVIEW>TXT and SERVICES.TXT in system/core/adb/ if you'd like to implement code that talks directly to the adb server.
ADB can also interact with the emulator's console. See the port number on the upper-left corner of the emulator window. You could connect to the port number using telnet.
* Main flags and environment variables:
-d: Ensure that the command is executed on the device, not the emulator. Note that if more than 1 device is connected, it will return error.
-e: Ensure that the command is executed on the emulator.
-p <product_name or path>: Sometimes if ANDROID_PRODUCT_OUT is not set, you must use -p to indicate the path to the product's output directory within an AOSP source tree. (For example: $ adb -p XXX sync)

* adb connect <host>[:<port>]: Connect to a remote device whose adbd daemon is running on TCP/IP instead of USB. (5555 being the default port)
* adb disconnect <host>[:<port>]
* adb -d get-state
* adb -d get-serialno
* adb wait-for-device
* adb -d status-window
* adb -d bugreport; == adb -d shell dumpstate;
  (bugreport uses the dumpstate, actually. The difference is that: dumpstate needs to run as root; while bugreport has no such restriction. Essentially, bugreport causes init to start dumpstate in a mode where it opens a Unix domain socket and listens for connections for dumping its output. bugreport then connects to that socket and copies the content it reads to its own stdout, which is then proxied through adb to your host's shell. So it can bypass the root access.)
* adb -d forward <local> <remote>; e.g. $ adb forward tcp:8080 tcp:80; (If device is running a web server, you can browse the device on host's web browser through localhost:8080). $ adb forward tcp:8000 dev:/dev/ttyUSB0; (In this case, any read/write operations conducted on port 8000 will result in read/write operations on the remote /dev/ttyUSB0.)
adb forward's connection types:
	tcp:<port> - Regular TCP port.
	localfilesystem:<unix domain socket> - A regular Unix domain socket.
	localabstract:<unix domain socket> -  Like a Unix domain socket, but it's a Linux-specific extension.
	localreserved:<unix domain socket> - Android's "reserved" Unix domain sockets. They're all in /dev/socket.
	dev:<char device name> - Actual devices on the target.
	jdwp:<pid> - Used to specify the PID of a Dalvik process for debugging purposes.

* Dalvik debugging:
Dalvik implements the Java Debug Wire Protocol (JDWP), thereby allowing you to use the regular jdb to debug your apps. So you could use forward feature to debug the apps on the host:
	$ adb forward localhost:8000 jdwp:376
	$ jdb -attach localhost:8000
To know which PID are debuggable through JDWP, use:
	$ adb jdwp
Note that all of this requires that adbd be running on the target before any Dalvik app is started. Only those Dalvik apps that you start after adbd will be debuggable.

* adb sync:
Updating the entirety /data and /system partition. It will automatically find the files to sync if ANDROID_PRODUCT_OUT is set. Otherwise, you'll need to manually point it to the right output directory like (Using -p [path]):
	$ adb -d -p ~/bilbo/out/target/product/soho/ sync
You could also sync just the /system or /data partition, not both:
	$ adb -d data

* adb install:
	$ adb install [-l] [-r] [-s] <file>
	$ adb uninstall [-k] <package>
-l: Tells to ensure that the app is forward-locked. In other words, it disallows the user from copying the .apk off the device. (The app is installed in /data/app-private/ instead of /data/app/.)
-r: TO re-install the app, preserving its data as it is.
-s: To install the app on external storage (the SD card instead of internal storage)
-k: Tells uninstall to keep the app's data although the .apk is removed.

* adb reboot:
	$ adb reboot
	$ adb reboot bootloader // reboot into bootloader
	$ adb reboot recovery  // reboot into recovery mode
Note that all these reboot commands result into an immediate reboot. There's no graceful shutdown of any process or system services.

* Switching connection type:
adbd could also listens on TCP/IP instead of using USB.
	$ adb tcpip <port>; // restarting adbd in TCP mode on port. Essentially it will set the service.adb.tcp.port to <port> and restart the adbd daemon.
After that you could connect to it like:
	$ adb connect <ip> <port>
To switch it back to use USB, type:
	$ adb -s <ip>:<port> usb; // restarting adbd in USB mode

* Controlling the emulator:
You can connect to each emulator's console using telnet:
	$ telnet localhost <port>;
	$ help (in telnet's console)

* Tunneling PPP:
You can ask adb to set up a PPP connection between the host and the target. This might be for tethering or simply to create a network connection between the host and target when you have only a USB connection between the both. 
	$ adb ppp <adb service name> [ppp opts]
See "Embedded Android" P208 for more details about how to use ppp.
Also see: 
	pppd's man page
	ppp over adb
	device shows up in lsusb + adb but not in ifconfig
	USB tether for Xperia X10 Mini Pro
	creates a ppp link between my Ubuntu development machine and BeagleBoard running Android connected via USB.


3. Android's command line:
Source code is in system/core/sh/.
Toolbox's source code is in system/core/toolbox/.
Toolbox's common commands:
	hd: dump a file in hexadecimal format.
	id: print the current user and group IDs.
	ionice: Get/set the I/O priority of a process.
	lsmod: List the currently loaded kernel modules
	lsof: List the currently open file descriptors.
	netcfg: Network configuration.
	netstat: Print network statistics.
	printenv: Print all environment variables exported.
	renice: Change a process's nice value.
	route: Print/modify the kernel's routing table.

• Global properties:
	getprop <key>
	setprop <key> <value>
	watchprops
* Once a property has been set, you can change its value using setprop. You can't, however, delete a property that you created using setprop. The property will disappear at the next reboot unless its name starts with "persist.". In that case, a file with the property's full name will be created in /data/property/ containing the property's value. To delete a persist property, you need to delete this file in /data/property/ or destroy the /data partition.

* You can also monitor properties being changed in real-time:
	$ watchprops

• Input events:
The devices that expose Linux's input layer are available through entries in /dev/input/. While Android's system server already handles those events appropriately, you might want to either observe or generate your own events:
	$ getevent [-t] [-n] [-s <switchmask>] [-S] [-v <mask>] [-p] [-q] [-c <count>] [-r] [<device>]
	-t: show timestamps
	-n: don't print newlines
	-s: print switch states for given bits
	-S: print all switch states
	-v: verbose mask (errs=1, dev=2, name=4, info=8, vers=16, pos.events=32)
	-p: show possible events (errs, dev, name, info, pos.events)
	-q: quiet (clear verbose mask)
	-c: print given number of events then exit
	-r: print rate events are reveived

	$ sendevent <device> <type> <code> <value>; // e.g.: $ sendevent /dev/input/event0 1 330 1;
Note that getevent's output is hexadecimal, while sendevent's input is decimal.

• Controlling services:
	start <servicename>
	stop <servicename>
There's no way to ask Android for the list of running services. ($ service list could list system services, but not the customed services.)
	$ stop zygote; // This will stop all apps and kill the system server.

• Logging:
It allows you to add your own logs to Android's logger:
	$ log [-p <prioritychar>] [-t <tag>] <message>;
	-prioritychar: v,d,i,w,e
	e.g.:
	$ log -p i -t HEHE "nima"; // then run logcat, you'll see I/HEHE (...): nima
This can be useful if you have scripts to test/debug.

• ioctl:
	$ ioctl [-l <length>] [-a <argsize>] [-rdh] <device> <ioctlnr>
	-l <length>: length of io buffer
	-a <argsize>: size of each argument (1-8)
	-r: open device in read-only mode
	-d: direct argument (no iobuffer)
	-h: print help

• Wiping the device:
Sometimes it's necessary to destroy data on an Android device:
	$ wipe <system|data|all>

• Other Android-specific commands:
* nandread: Reading the contents of a NAND flash device to a file.
* newfs_msdos: Allowing you to format a device as a VFAT filesystem.
* notify: This command uses the inotify syscall to monitor directories or files for modification.
* r: This command just repeats the previous command you typed on the shell.
* schedtop: Like top, schedtop is for continuous real-time monitoring of the kernel's scheduler. 
* setconsole: This command lets you switch consoles.

• logcat:
	$ logcat [options] [filterspecs];
	options:
		-s: set default filter to silent. Like specifying filterspec "*:s"
		-f <filename>: Log to file, default to stdout.
		-r [<kbytes>]: Rotate log every kbytes (16 if unspecified). Requires -f.
		-n <count>: Set max number of rotated logs to <count>, default to 4.
		-v <format>: Set the log print format, where <format> is one of: brief, process, tag, thread, raw, time, threadtime, long.
		-c: clear the entire log and exit.
		-d: dump the log and then exit. (don't block)
		-t <count>: print only the most recent <count> lines. (implies -d)
		-g: get the size of the log's ring buffer and exit.
		-b <buffer>: request alternate ring buffer (main (default), radio, events)
		-B: output the log in binary.
	filterspecs:
		<tag>[:priority]
		-tag: A log component tag ('*' for all)
		-priority: V (verbose), D (debug), I (info), W (warn), E (error), F (fatal), S (silent, supress all output)
	Note that for filterspecs: '*' == '*:d'; and 'tag' == 'tag:v'. If not specified on the command line, filterspec is set from ANDROID_LOG_TAGS. If no filterspec is found, filter defaults to '*:I'. If not specified with -v, format is set from ANDROID_PRINTF_LOG or defaults to 'brief'.
* For example: $ logcat ActivityManager:I Myapp:D *:s; // Supressing all logs except those with the tag "ActivityManager" at priority 'I' and above, and all log messages with tag "Myapp" with priority 'D' and above.

• debuggerd:
This daemon is started by init early during startup. It opens the android:debuggerd abstract Unix domain socket and awaits connections. It remains dormant until a user-space process crashes. debuggerd then does two things: create a tombstone file in /data/tombstones/, and if required, allows debugging to be done through gdbserver.
* Also, if you set the debug.db.uid to some UID larger than that of the crashing process (just set a large integer value such as 2^31-1), debuggerd will then use the ptrace() syscall to attach to the dying process and allow you to start gdbserver to take control of it. Once gdbserver is attached to the dying process, you can then use one of the arm-eabigdb debuggers that are part of the AOSP's prebuilt/ directory to attach to the gdbserver running on the target.

• logwrapper:
This command allows you to run another command and redirect its stdout and stderr to the Android logger:
	$ logwrapper [-x] <binary> [<args> ...]
Using -x causes logwrapper to generate a segmentation fault (SIGSEGV) when binary terminates.

• run-as:
Allows you to run a binary as if it were executed with the rights associated with an app package:
	$ run-as <package-name> <command> [<args>]
The command will run from the directory associated with package-name in /data/app/ with that app's UID/GID.

• sdcard utility:
This utility uses Linux's FUSE to emulate in any directory on the filesystem the rights and permissions you'd find on any FAT-formatted SD card:
	$ sdcard <path> <uid> <gid>
The directory provided as path will be mounted to /mnt/sdcard/. And while sdcard must be issued as root, it'll run as /uid/gid. This is useful for devices that don'y actually have a removable SD card. The "external" storage is emulated on the "internal" storage using the sdcard command.

• Extra native utilities and daemons:
nc: netcat
sqlite3: SQLite
strace
tcpdump
oprofiled
cpueater: A while(1) loop, eating as much CPU as possible.
daemonize: Allows you to run it as a daemon in the background.
crasher: Packaged with debuggerd and essentially simulates a crashing process.
latencytop: Provides per-process latency information.
librank: Prints memory usage information for each object mapped into any process's memory.
procmem: Prints memory usage information for each section of a running PID.
procrank: Ranks processes by memory used.
schedtest: Tests the scheduler to see how reliable it is at promptly waking up tasks that request 1ms sleeps.
showmap: Prints out a process's memory map.
showslab: Prints out information on the slab allocator.
timeinfo: Reports realtime, uptime, awake percentage, and sleep percentage to the standard output.


4. Init:
Source code in system/core/init/.
• After getting started by the kernel, it essentially reads its configuration files, prints out a bootlogo or text to the screen, opens a socket for its property service, and starts all the daemons and services that bring up the entire Android user-space.
One of the first thing init does is check whether it was invoked as ueventd. The next thing init does is create and mount /dev, /proc, and /sys. Then it readss the init.rc and init.<device_name>.rc files and parses their content into its internal structures. Once all initialization is done, init then enters an infinite loop in which it restarts any services that might have exited and that need restarting. Then it polls file descriptors it handles, such as property service socket, for any input that needs to be processed, (This is how setprop property setting requests are serviced, for instance.)
• Configuration files:
One thing very important is that: init reads both .rc files before it executes any of the instructions.
• Semantics:
.rc files contain a series of declarations that fall in one of two types: actions and services. ('on' for an action, 'service' for a service.)
	on <trigger>
		<command>
		<command>
		...
	
	service <name> <pathname> [<argument>]*
		<option>
		<option>
		...
* Note: init's "services" have nothing to do with system services or the service component used by app developers.
Only an action results in the execution of commands; service declarations, however, serve only to describe services, they don't actually start anything. The services are typically started or stopped when an action is triggered.
* Two types of action triggers: predefined triggers and triggers activated on property-value changes.
i)  Predefined triggers:
early-init
init
early-fs
fs
post-fs
early-boot
boot
See "Embedded Android" P232 for more details of the sequence. After boot, run all property-triggered commands:
ii) Property-based triggers:
	on property:<name>=<value>
This allows you to run a set of commands when the property called name is set to value.
init's action commands:
	chdir <dir>
	chmod <octal-mode> <path>
	chown <owner> <group> <path>
	chroot <dir>: Set process's root directory
	class_start <serviceclass>: Starts all services that belong to serviceclass.
	class_stop <serviceclass>: Stop all services that belong to serviceclass, and disables them.
	class_reset <serviceclass>: Like class_stop but doesn't disable the services.
	copy <path> <dest>
	domainname <name>: Set's the system's domain name.
	exec <path> [argument]*: Forks and executes a program. This operation is blocking.
	export <name> <value>: Set environment variable.
	ifup <interface>: Start interface up.
	import <filename>: Import an additional init config file to one currently parsed.
	insmod <path>
	hostname <name>: Set the system's hostname.
	load_persist_props: Load persistent properties.
	loglevel <level>: Set the current log level.
	mkdir <path> [mode] [owner] [group]
	mount <type> <device> <dir> [mountoption]*: Mount device to dir.
	mount_all <path>: Mount all partitions based on the information found in the file path.
	restart <service>
	restorecon <path>: Restore SELinux context.
	rm <path>
	rmdir <path>
	setkey <table> <index> <value>: Set a keyboard entry value.
	setrlimit <resource> <cur> <max>: Set the resource's rlimit.
	setcon <string>: Set security context (SELinux).
	setenforce <value>: Enable or disable security enforcement (SELiux).
	setsebool: Set SELinux boolean.
	symlink <target> <path>
	sysclktz <mins_west_of_gmt>: Set timezone.
	trigger <event>: Start action called event.
	wait <path>: Wait until a file appears in the filesystem.
	write <path> <string> [<string>]*: Open a file and write strings to it.
Note that init will not attempt to issue commands to the command line, commands that aren't recognized are simply ignored.

* Service declarations:
	service <name> <pathname> [<argument>]*
What's important to highlight here is that once this line is parsed, the service will be known by init as name. The actual name of the binary that is pointed to by pathname will itself not be recognized. See the example:
	service zygote /system/bin/app_process -Xzygote /system/bin/ --zygote --start-system-server
* Service options:
	class <name>: This service belongs to the class called name. The default class is default.
	console: Service requires and runs on console.
	critical: If this service crashes 5 times, reboot into recovery mode.
	disabled: Don't automatically start this service. It'll need to be manually started using start.
	group <groupname> [<groupname>]*: Run this service under the given group(s).
	ioprio <rt|be|idle> <ioprio 0-7>: Set the service's I/O scheduler and priority.
	keycodes <keycode> [<keycode>]*: Start the service whenever the given keycode(s) are activated.
	oneshot: Service runs only once. Service is set as disabled on exit.
	onrestart <command>: If the service restarts, run command.
	seclabel <string>: Set the service's SELinux label.
	setenv <name> <value>: Set the name environment variables before starting this service.
	socket <name> <type> <perm> [<user>] [<group>]: Creates a Unix domain socket and pass its file descriptor to the process as it starts.
	user <username>: Runs this service as username.
* What about init.<device_name>.sh?
Despite the name of the file, init itself doesn't recognize such scripts and has no code that looks for them. But board-specific .rc files cab be made to run shell scripts like they'd run any other service. For example:
	service goldfish-setup /system/etc/init.goldfish.sh
		oneshot
See more examples in init.rc, init.qcom.rc.

• Global properties:
There're two ways that property service is exposed to the rest of the system: 
i)  /dev/socket/property_service (a Unix domain socket that processes can open to talk to the property service and have it set and/or change the value of global properties.)
ii) /dev/__properties__ (An "invisible" file, i.e. you won't see it in /dev if you look for it. It is memory-mapped into the address space of all services started by init. It is through this mapped region that descendants of init can read global properties.).
* /dev/__properties__'s invisibility:
You won't find /dev/__properties__ in the filesystem because of the way init handles the file:
i)   Creates /dev/__properties__ in read-write mode.
ii)  Sets its size to a desired global properties workspace size.
iii) Memory-maps the file into init's address space.
iv)  Closes the file descriptor.
v)   Opens the file as read-only.
vi)  Deletes the file from the filesystem.
By deleting the file at last step, no one could see the file. However, since the file was memory-mapped when it was still open in read-write mode, init's property service is able to continue writing to the memory-mapped file. Also, since it was opened in read-only mode before it was deleted, init also has a file descriptor it can pass to its children. So they can in turn memory-map the file, which will remain read-only for them.
* See system/core/init/property_service.c. You can also interact with the property service from within the code you build as part of the AOSP: see frameworks/base/core/java/android/os/SystemProperties.java. To use this class, you would need to import android.os.SystemProperties. If you're using C, have a look at system/core/include/cutils/properties.h, you may need to include <cutils/properties.h>.

ro.*: Properties start with this prefix are meant to be read-only. So they can be set only once in system's lifetime.
persist.*: Properties start with this prefix are committed to persistent storage each time they're set.
ctl.*: There's a ctl.start and ctl.stop. When the property service receives a request to set either of these, it starts/stops the service whose name is provided as the value for the property. For example:
	$ setprop ctl.start bootanim
	$ setprop ctl.stop bootanim
	property_set("ctl.start", "bootanim");
Note that start/stop relies on ctl.* to start/stop services.
net.change: Whenever a net.* property is changed, net.change is set to the name of that property. So net.change always contains the name of the last net.* property that was modified.

• The build system:
Two property files are generated by the build system:
/system/build.prop: Contains information about the build itself.
/default.prop: Contains default values for certain key properties.

• ueventd:
init includes functionality to handle kernel hotplug events. When the /init binary is invoked through the /sbin/ueventd symbolic link, it immediately switches its identity from running as the regular init to running as ueventd.
ueventd is the very first services started by the default init.rc. Unlike init, ueventd'd configuration files have a rather simple format:
	/dev/<node>		<mode>		<user>		<group>

• Boot logo:
Not counting whatever the device's bootloader might display at startup, Android devices' screens typically go through four stages during boot:
* Kernel boot screen: Kernel might either maintain the screen black until init starts, ot it might display a static logo.
* Init boot logo: This is a text string or an image displayed very early by init while it initializes the console. (We'll discuss what init displays here below.)
* Boot animation: This is a series of animated images, possibly a loop, that displays during the SurfaceFliger's start up. (We'll discuss the boot animation when we cover the Java userspace in the next chapter.)
* Home screen: This is the starting screen of the Launcher.
init attempts to load a logo image from the /initlogo.rle file and display it to the screen; if it doesn't find such a file, it displays the familiar text string. 
If you'd like to change that string, have a look at console_init_action() in system/core/init/init.c.
Two tools on the host are required to create a proper initlogo.rle:
	$ cd device/acme/coyotepad
	$ convert -depth 8 acmelogo.png rgb:acmelogo.raw
	$ rgb2565 -rle < acmelogo.raw > acmelogo.rle
This will take the acmelogo.png and convert it into an acmelogo.rle, which you can then copy by modifying the coyotepad's full_coyote.mk to add this snippet:
	PRODUCT_COPY_FILES += \
						  device/acme/coyotepad/acmelogo.rle:root/initlogo.rle
